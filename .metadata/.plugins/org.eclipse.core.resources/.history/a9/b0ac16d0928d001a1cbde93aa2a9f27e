package com.sfofana.app.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.rekognition.AmazonRekognition;
import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;
import com.amazonaws.services.rekognition.model.Image;
import com.amazonaws.services.rekognition.model.S3Object;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.rekognition.model.BoundingBox;
import com.amazonaws.services.rekognition.model.CompareFacesMatch;
import com.amazonaws.services.rekognition.model.CompareFacesRequest;
import com.amazonaws.services.rekognition.model.CompareFacesResult;
import com.amazonaws.services.rekognition.model.ComparedFace;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.ByteBuffer;
import com.amazonaws.util.IOUtils;
import com.sfofana.app.model.Compare;
import com.sfofana.app.model.Upload;

@Service
public class UserServiceImpl implements UserService {

	@Value("${aws.access.key}")
	private String accessKey;
	@Value("${aws.secret.key}")
	private String secretKey;
	@Value("${aws.s3.bucket}")
	private String bucket;
	@Value("${basedir}")
	private String basedir;
	private String imgName = "i5.jpg";
	
	Float similarityThreshold = 70F;
	String img1 = "source.jpg";
	String img2 = "target.jpg";
	String img3 = "";
	
	
	@Override
	public Compare compareFacesResults(Compare faces) {
		BasicAWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey); 
		AmazonRekognition client = AmazonRekognitionClientBuilder
												.standard()
												.withCredentials(new AWSStaticCredentialsProvider(credentials))
												.withRegion("us-east-2").build();
		
		Object result = null;
		try {
			CompareFacesRequest compareFacesRequest = new CompareFacesRequest()
					.withSourceImage(
							new Image()
							.withS3Object(new S3Object()
									.withName(faces.getName1())
									.withBucket(bucket)
									)
							).withTargetImage(
							new Image()
							.withS3Object(new S3Object()
									.withName(faces.getName2())
									.withBucket(bucket)
									)
							).withSimilarityThreshold(similarityThreshold);
			CompareFacesResult results = client.compareFaces(compareFacesRequest);
			List<CompareFacesMatch> resList = results.getFaceMatches();
			
			if(!resList.isEmpty()) {
				for(CompareFacesMatch match : resList) {
					result = match.getSimilarity();
					faces.setResults(match.getSimilarity());
					System.out.println("Similarity is: " + match.getSimilarity());
				}
			} else {
				System.out.println("Faces don't match");
			}
		} catch (Exception e) {
			System.out.println("Internal Server Error");
		}
		return faces;
	}


	@Override
	public Upload processImageUpload(Upload file) {
		BasicAWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey); 
		AmazonS3 s3 = AmazonS3ClientBuilder
												.standard()
												.withCredentials(new AWSStaticCredentialsProvider(credentials))
												.withRegion("us-east-2").build();
		file.setProcess("Internal Error");
		try {
			file.getFile().transferTo(new File(basedir+imgName));
			File output = new File(basedir+imgName);
			try {
				s3.putObject(bucket, imgName, output);
				file.setProcess("File Successfully Uploaded");
				return file;
			} catch (AmazonServiceException e) {
				System.out.println("Internal Server Error "+e);
			}
		} catch (IllegalStateException | IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		return file;
	}
	
}
